
Problems with MPI_Bsend and the MPI progress implementations
============================================================

The two experiments show what can happen if blocking MPI_Bsend and MPI_Recv is used
to implement a 1-dimensional non-periodic halo communication pattern.


If the MPI library implements progress only within MPI procedure calls,
then each MPI_Recv needs an unspecific MPI call in the sending process,
because the buffered data resides still there.
By good luck, this is an MPI_Recv call in the sending process.
By bad luck,  all such MPI_Recv in the sending process are already done and
it is already in the numerical work and such unspecific MPI call will be
not before the numerical epoch ends (and will be the MPI_Bsend in the next
global iteration).

Therefore, smallest (natural) dalays between the processes can cause that
each numerical round (i.e., halo exchange plus numerical epoch) needs
twice the time than expected.

In the first experiment the output should show this as predictable behavior.
For this, we use dedicated delays between the MPI_Bsend and the MPI_Recv calls.

In the second experiment, these delays are removed and usually the extreme
slow down is still visible (probably through smallest natural delays).

Compile-time options:
=====================

  -D BUF_CNT_SIZE=2000          to use less or more than 100000 floats as message size
  -D USE_THREAD_MULTIPLE        to use MPI_Init_thread(MPI_THREAD_MULTIPLE instead of MPI_Init

Used compile-time options:
==========================

For all experiments, BUF_CNT_SIZE=100000 ==> the message size is 400000 bytes 


MPI_Init is used

Run-time options:
=====================

export MPICH_ASYNC_PROGRESS=1   only for mpich to switch on an asynchronous progress thread


And here is the general pattern:
================================

The experiments are designed for 3 processes, but can also be used with more than 3 processes.
In that case, the pattern of process rank==1 is used for all "middle" processes

After a barrier, the following pattern is implemented in a loop of three iterations:

         myrank==0             myrank==1             myrank==2       
                            bsend(to:myrank-1)    bsend(to:myrank-1) 
      bsend(to:myrank+1)    bsend(to:myrank+1)                       
                            recv(from:myrank-1)   recv(from:myrank-1)
      recv(from:myrank+1)   recv(from:myrank+1)                      
       20 sec numerics       20 sec numerics       20 sec numerics   

In our 1st experiment, the pattern is a bit disturbed by some delays between the bsend and the recv:
=====================

iter     myrank==0             myrank==1             myrank==2       
  time
1  0                        bsend(to:myrank-1)    bsend(to:myrank-1) 
1  0  bsend(to:myrank+1)    bsend(to:myrank+1)                       
1  0     sleep(5)              sleep(3)              sleep(1)        marking some different delays
1  1                                              recv(from:myrank-1)
1  1                                                 sleep(20)       marking some balanced numerics
1  3                        recv(from:myrank-1)                      
1  3                        recv(from:myrank+1)                      
1  3                           sleep(20)                             marking some balanced numerics
1  5  recv(from:myrank+1)                                            
1  5     sleep(20)                                                   marking some balanced numerics

The following listing shows all three iterations if asynchronous progress properly works

iter     myrank==0             myrank==1             myrank==2       
  time
1  0     barrier               barrier               barrier         
1  0                        bsend(to:myrank-1)    bsend(to:myrank-1) 
1  0  bsend(to:myrank+1)    bsend(to:myrank+1)                       
1  0     sleep(5)              sleep(3)              sleep(1)        marking some different delays
1  1        :                     :               recv(from:myrank-1)
1  1        :                     :                  sleep(20)       marking some balanced numerics
1  3        :               recv(from:myrank-1)         :            
1  3        :               recv(from:myrank+1)         :            
1  3        :                  sleep(20)                :            marking some balanced numerics
1  5  recv(from:myrank+1)         :                     :            
1  5     sleep(20)                :                     :            marking some balanced numerics
1  6        :                     :                     :            all in numerics
1 ...                                                                all in numerics
1 20        :                     :                     :            all in numerics
2 21        :                     :               bsend(to:myrank-1) 
2 21        :                     :                  sleep(1)        marking some different delays
2 22        :                     :               recv(from:myrank-1)
2 22        :                     :                     |            blocked due to late sender
2 23        :               bsend(to:myrank-1)          |            
2 23        :               bsend(to:myrank+1)    return from recv   after 1 sec idle time
2 23        :                  sleep(3)                              marking some different delays
2 23        :                     :                  sleep(20)       marking some balanced numerics
2 25  bsend(to:myrank+1)          :                     :            
2 25     sleep(5)                 :                     :            marking some different delays
2 26        :               recv(from:myrank-1)         :            
2 26        :               recv(from:myrank+1)         :            
2 26        :                  sleep(20)                :            marking some balanced numerics
2 30  recv(from:myrank+1)         :                     :            
2 30     sleep(20)                :                     :            marking some balanced numerics
2 31        :                     :                     :            all in numerics
2 ...                                                                all in numerics
2 42        :                     :                     :            all in numerics
3 43        :                     :               bsend(to:myrank-1) 
3 43        :                     :                  sleep(1)        marking some different delays
3 44        :                     :               recv(from:myrank-1)
3 46        :               bsend(to:myrank-1)          |            
3 46        :               bsend(to:myrank+1)    return from recv   2 sec idle time due to late sender
3 46        :                  sleep(3)              sleep(20)       marking some different delays
3 49        :               recv(from:myrank-1)         :            
3 49        :                     |                     :            blocked due to late sender
3 50  bsend(to:myrank+1)    return from recv            :            after 1 sec idle time
3 50                        recv(from:myrank+1)         :            
2 50     sleep(5)                                       :            marking some different delays
3 50        :                  sleep(20)                :            marking some balanced numerics
3 55  recv(from:myrank+1)         :                     :            
3 55     sleep(20)                :                     :            marking some balanced numerics
3 56        :                     :                     :            all in numerics
3 ...                                                                all in numerics
3 65        :                     :                     :            all in numerics
3 66        :                     :                  back from sleep marking some balanced numerics
  66        :                     :                  barrier         
3 70        :                  back from sleep          |            marking some balanced numerics
  70        :                  barrier                  |            
3 75     back from sleep          |                     |            marking some balanced numerics
  75     barrier                  |                     |            
  75   back from barrier     back from barrier     back from barrier 

==========================================
=== And now, let's do the experiments: ===
==========================================

Experiment 1: delays are 5, 3, and 1 seconds for my_rank = 0, 1..size-2, size-1
=============

[0] 1   0.0 calling bsend(to:+1)
[0] 1   0.0 return  bsend(to:+1)
[0] 1   0.0 calling sleep(5)
[2] 1   0.0   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   calling bsend(to:-1)
[1] 1   0.0   -   -   -   -   -   -  calling bsend(to:-1)
[1] 1   0.0   -   -   -   -   -   -  return  bsend(to:-1)
[1] 1   0.0   -   -   -   -   -   -  calling bsend(to:+1)
[1] 1   0.0   -   -   -   -   -   -  return  bsend(to:+1)
[1] 1   0.0   -   -   -   -   -   -  calling sleep(3)
[2] 1   0.0   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   return  bsend(to:-1)
[2] 1   0.0   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   calling sleep(1)
[2] 1   1.0   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   return  sleep(1)
[2] 1   1.0   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   calling recv (from:-1)
[2] 1   1.0   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   return  recv (from:-1)
[2] 1   1.0   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   start numerics(20)
[1] 1   3.0   -   -   -   -   -   -  return  sleep(3)
[1] 1   3.0   -   -   -   -   -   -  calling recv (from:-1)
[1] 1   3.0   -   -   -   -   -   -  return  recv (from:-1)
[1] 1   3.0   -   -   -   -   -   -  calling recv (from:+1)
[1] 1   3.0   -   -   -   -   -   -  return  recv (from:+1)
[1] 1   3.0   -   -   -   -   -   -  start numerics(20)
[0] 1   5.0 return  sleep(5)
[0] 1   5.0 calling recv (from:+1)
[0] 1   5.0 return  recv (from:+1)
[0] 1   5.0 start numerics(20)
[2] 1  21.0   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   end of numerics(20)
[2] 2  21.0   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   calling bsend(to:-1)
[2] 2  21.0   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   return  bsend(to:-1)
[2] 2  21.0   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   calling sleep(1)
[2] 2  22.0   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   return  sleep(1)
[2] 2  22.0   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   calling recv (from:-1)
[1] 1  23.0   -   -   -   -   -   -  end of numerics(20)
[1] 2  23.0   -   -   -   -   -   -  calling bsend(to:-1)
[1] 2  23.0   -   -   -   -   -   -  return  bsend(to:-1)
[1] 2  23.0   -   -   -   -   -   -  calling bsend(to:+1)
[1] 2  23.0   -   -   -   -   -   -  return  bsend(to:+1)
[1] 2  23.0   -   -   -   -   -   -  calling sleep(3)
[2] 2  23.0   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   return  recv (from:-1)
[2] 2  23.0   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   start numerics(20)
[0] 1  25.0 end of numerics(20)
[0] 2  25.0 calling bsend(to:+1)
[0] 2  25.0 return  bsend(to:+1)
[0] 2  25.0 calling sleep(5)
[1] 2  26.0   -   -   -   -   -   -  return  sleep(3)
[1] 2  26.0   -   -   -   -   -   -  calling recv (from:-1)
[1] 2  26.0   -   -   -   -   -   -  return  recv (from:-1)
[1] 2  26.0   -   -   -   -   -   -  calling recv (from:+1)
[1] 2  26.0   -   -   -   -   -   -  return  recv (from:+1)
[1] 2  26.0   -   -   -   -   -   -  start numerics(20)
[0] 2  30.0 return  sleep(5)
[0] 2  30.0 calling recv (from:+1)
[0] 2  30.1 return  recv (from:+1)
[0] 2  30.1 start numerics(20)
[2] 2  43.0   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   end of numerics(20)
[2] 3  43.0   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   calling bsend(to:-1)
[2] 3  43.0   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   return  bsend(to:-1)
[2] 3  43.0   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   calling sleep(1)
[2] 3  44.0   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   return  sleep(1)
[2] 3  44.0   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   calling recv (from:-1)
[1] 2  46.0   -   -   -   -   -   -  end of numerics(20)
[1] 3  46.0   -   -   -   -   -   -  calling bsend(to:-1)
[1] 3  46.0   -   -   -   -   -   -  return  bsend(to:-1)
[1] 3  46.0   -   -   -   -   -   -  calling bsend(to:+1)
[1] 3  46.0   -   -   -   -   -   -  return  bsend(to:+1)
[1] 3  46.0   -   -   -   -   -   -  calling sleep(3)
[2] 3  46.1   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   return  recv (from:-1)
[2] 3  46.1   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   start numerics(20)
[1] 3  49.0   -   -   -   -   -   -  return  sleep(3)
[1] 3  49.0   -   -   -   -   -   -  calling recv (from:-1)
[0] 2  50.1 end of numerics(20)
[0] 3  50.1 calling bsend(to:+1)
[0] 3  50.1 return  bsend(to:+1)
[0] 3  50.1 calling sleep(5)
[1] 3  50.0   -   -   -   -   -   -  return  recv (from:-1)
[1] 3  50.0   -   -   -   -   -   -  calling recv (from:+1)
[1] 3  50.1   -   -   -   -   -   -  return  recv (from:+1)
[1] 3  50.1   -   -   -   -   -   -  start numerics(20)
[0] 3  55.1 return  sleep(5)
[0] 3  55.1 calling recv (from:+1)
[0] 3  55.1 return  recv (from:+1)
[0] 3  55.1 start numerics(20)
[2] 3  66.1   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   end of numerics(20)
[2] -  66.1   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   calling barrier
[1] 3  70.1   -   -   -   -   -   -  end of numerics(20)
[1] -  70.1   -   -   -   -   -   -  calling barrier
[0] 3  75.1 end of numerics(20)
[0] -  75.1 calling barrier
[0] -  75.1 return  barrier
[1] -  75.1   -   -   -   -   -   -  return  barrier
[2] -  75.1   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   return  barrier

Experiment 2: all delays are 0 seconds
=============

[0] 1   0.0 calling bsend(to:+1)
[1] 1   0.0   -   -   -   -   -   -  calling bsend(to:-1)
[0] 1   0.0 return  bsend(to:+1)
[0] 1   0.0 calling sleep(0)
[0] 1   0.0 return  sleep(0)
[0] 1   0.0 calling recv (from:+1)
[1] 1   0.0   -   -   -   -   -   -  return  bsend(to:-1)
[1] 1   0.0   -   -   -   -   -   -  calling bsend(to:+1)
[1] 1   0.0   -   -   -   -   -   -  return  bsend(to:+1)
[1] 1   0.0   -   -   -   -   -   -  calling sleep(0)
[1] 1   0.0   -   -   -   -   -   -  return  sleep(0)
[1] 1   0.0   -   -   -   -   -   -  calling recv (from:-1)
[2] 1   0.0   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   calling bsend(to:-1)
[2] 1   0.0   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   return  bsend(to:-1)
[2] 1   0.0   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   calling sleep(0)
[2] 1   0.0   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   return  sleep(0)
[2] 1   0.0   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   calling recv (from:-1)
[2] 1   0.0   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   return  recv (from:-1)
[2] 1   0.0   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   start numerics(20)
[0] 1   0.0 return  recv (from:+1)
[0] 1   0.0 start numerics(20)
[1] 1   0.0   -   -   -   -   -   -  return  recv (from:-1)
[1] 1   0.0   -   -   -   -   -   -  calling recv (from:+1)
[1] 1   0.0   -   -   -   -   -   -  return  recv (from:+1)
[1] 1   0.0   -   -   -   -   -   -  start numerics(20)
[2] 1  20.0   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   end of numerics(20)
[2] 2  20.0   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   calling bsend(to:-1)
[2] 2  20.0   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   return  bsend(to:-1)
[2] 2  20.0   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   calling sleep(0)
[2] 2  20.0   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   return  sleep(0)
[2] 2  20.0   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   calling recv (from:-1)
[0] 1  20.0 end of numerics(20)
[0] 2  20.0 calling bsend(to:+1)
[0] 2  20.0 return  bsend(to:+1)
[0] 2  20.0 calling sleep(0)
[0] 2  20.0 return  sleep(0)
[0] 2  20.0 calling recv (from:+1)
[1] 1  20.0   -   -   -   -   -   -  end of numerics(20)
[1] 2  20.0   -   -   -   -   -   -  calling bsend(to:-1)
[1] 2  20.0   -   -   -   -   -   -  return  bsend(to:-1)
[1] 2  20.0   -   -   -   -   -   -  calling bsend(to:+1)
[1] 2  20.0   -   -   -   -   -   -  return  bsend(to:+1)
[1] 2  20.0   -   -   -   -   -   -  calling sleep(0)
[1] 2  20.0   -   -   -   -   -   -  return  sleep(0)
[1] 2  20.0   -   -   -   -   -   -  calling recv (from:-1)
[2] 2  20.1   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   return  recv (from:-1)
[2] 2  20.1   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   start numerics(20)
[0] 2  20.1 return  recv (from:+1)
[0] 2  20.1 start numerics(20)
[1] 2  20.1   -   -   -   -   -   -  return  recv (from:-1)
[1] 2  20.1   -   -   -   -   -   -  calling recv (from:+1)
[1] 2  20.1   -   -   -   -   -   -  return  recv (from:+1)
[1] 2  20.1   -   -   -   -   -   -  start numerics(20)
[2] 2  40.1   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   end of numerics(20)
[2] 3  40.1   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   calling bsend(to:-1)
[2] 3  40.1   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   return  bsend(to:-1)
[2] 3  40.1   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   calling sleep(0)
[2] 3  40.1   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   return  sleep(0)
[2] 3  40.1   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   calling recv (from:-1)
[0] 2  40.1 end of numerics(20)
[0] 3  40.1 calling bsend(to:+1)
[0] 3  40.1 return  bsend(to:+1)
[0] 3  40.1 calling sleep(0)
[0] 3  40.1 return  sleep(0)
[0] 3  40.1 calling recv (from:+1)
[1] 2  40.1   -   -   -   -   -   -  end of numerics(20)
[1] 3  40.1   -   -   -   -   -   -  calling bsend(to:-1)
[1] 3  40.1   -   -   -   -   -   -  return  bsend(to:-1)
[1] 3  40.1   -   -   -   -   -   -  calling bsend(to:+1)
[1] 3  40.1   -   -   -   -   -   -  return  bsend(to:+1)
[1] 3  40.1   -   -   -   -   -   -  calling sleep(0)
[1] 3  40.1   -   -   -   -   -   -  return  sleep(0)
[1] 3  40.1   -   -   -   -   -   -  calling recv (from:-1)
[0] 3  40.1 return  recv (from:+1)
[0] 3  40.1 start numerics(20)
[1] 3  40.1   -   -   -   -   -   -  return  recv (from:-1)
[1] 3  40.1   -   -   -   -   -   -  calling recv (from:+1)
[1] 3  40.1   -   -   -   -   -   -  return  recv (from:+1)
[1] 3  40.1   -   -   -   -   -   -  start numerics(20)
[2] 3  40.2   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   return  recv (from:-1)
[2] 3  40.2   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   start numerics(20)
[0] 3  60.1 end of numerics(20)
[0] -  60.1 calling barrier
[1] 3  60.1   -   -   -   -   -   -  end of numerics(20)
[1] -  60.1   -   -   -   -   -   -  calling barrier
[2] 3  60.2   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   end of numerics(20)
[2] -  60.2   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   calling barrier
[0] -  60.2 return  barrier
[1] -  60.2   -   -   -   -   -   -  return  barrier
[2] -  60.2   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   ~   return  barrier
